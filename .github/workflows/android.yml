name: Android Build and Release
on:
  push:
    branches: master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.6.0
        with:
          runs.using: node16

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
          runs.using: node16

      - name: Cache Gradle and wrapper
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          runs.using: node16

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Build Release Bundle
        run: ./gradlew bundleRelease

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          runs.using: node16
        with:
          prerelease: true
          tag_name: 'v2.2.2' # Replace with your versioning scheme
          body: 'Description of the release'

      - name: Upload APK to release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          runs.using: node16
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: app/build/outputs/apk/release/app-release.apk # The path to the asset you want to upload
          asset_name: app-release.apk # The name of the asset you want to upload
          asset_content_type: application/vnd.android.package-archive # The content type of the asset you want to upload
